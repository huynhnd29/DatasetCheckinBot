const { format } = require("date-fns");

const jsonServer = require("json-server");
const { isAuthenticated } = require("./jwt-authenticate");

const { defaultPort, databaseFile, jwtSecret } = require("./config.json");

const low = require("lowdb");
const FileSync = require("lowdb/adapters/FileSync");
const adapter = new FileSync(databaseFile);

const { Telegraf } = require("telegraf");
const { GoogleSpreadsheet } = require("google-spreadsheet");
const bot = new Telegraf("2129347931:AAEwfxGojMtFZFm76vJZjQzqIVVGbau951A");

const db = low(adapter);

const server = jsonServer.create();
const router = jsonServer.router(db);
const middlewares = jsonServer.defaults();
const port = process.env.PORT || defaultPort;

// Set default middlewares (logger, static, cors and no-cache)
server.use(middlewares);

// Handle POST, PUT and PATCH request
server.use(jsonServer.bodyParser);

// Save createdAt and updatedAt automatically
server.use((req, res, next) => {
  const currentTime = Date.now();

  if (req.method === "POST") {
    req.body.createdAt = currentTime;
    req.body.modifiedAt = currentTime;
  } else if (["PUT", "PATCH"].includes(req.method)) {
    req.body.modifiedAt = currentTime;
  }

  next();
});

bot.command("diemdanh", (ctx) => {
  console.log(ctx.from, " -- ", ctx.chat.id);
  var name;
  var time;
  var userName;
  if (ctx.from.first_name == null) {
    if (ctx.from.last_name == null) {
      name = "VôDanh";
    } else {
      name = ctx.from.last_name;
    }
  } else {
    if (ctx.from.last_name == null) {
      name = ctx.from.first_name;
    } else {
      name = ctx.from.first_name + " " + ctx.from.last_name;
    }
  }
  time = new Date();
  userName = ctx.from.username;
  var date = time.getDate() + "/" + time.getMonth() + "/" + time.getFullYear();
  var is_late = false;
  if (time.getHours() < 10) {
    if (time.getMinutes() < 10) {
      var hour = "0" + time.getHours() + ":" + "0" + time.getMinutes();
    } else {
      var hour = "0" + time.getHours() + ":" + time.getMinutes();
    }
  } else {
    if (time.getMinutes() < 10) {
      var hour = time.getHours() + ":" + "0" + time.getMinutes();
    } else {
      var hour = time.getHours() + ":" + time.getMinutes();
    }
  }
  if (time.getHours() > 8 && time.getHours() < 13) {
    is_late = true;
  }
  if (time.getHours() == 8) {
    if (time.getMinutes() > 30 && time.getMinutes() < 60) {
      is_late = true;
    }
  }
  if (time.getHours() > 13 && time.getHours() < 18) {
    is_late = true;
  }
  if (time.getHours() == 13) {
    if (time.getMinutes() > 30 && time.getMinutes() < 60) {
      is_late = true;
    }
  }
  bot.telegram.sendMessage(
    ctx.chat.id,
    "Xin chào " + name + "! Bạn đã điểm danh vào lúc " + hour + " " + date,
    {}
  );
  accessSpreadSheet(name, userName, hour, date, ctx.chat.id, is_late);
});



// Access control
server.use((req, res, next) => {
  const protectedResources = db.get("protected_resources").value();
  if (!protectedResources) {
    next();
    return;
  }

  const resource = req.path.slice(1).split("/")[0];
  const protectedResource =
    protectedResources[resource] &&
    protectedResources[resource].map((item) => item.toUpperCase());
  const reqMethod = req.method.toUpperCase();

  if (protectedResource && protectedResource.includes(reqMethod)) {
    if (isAuthenticated(req)) {
      next();
    } else {
      res.sendStatus(401);
    }
  } else {
    next();
  }
});

// Setup others routes
server.use(router);

// Start server
server.listen(port, () => {
  console.log("Server is running on port " + port);
  bot.launch();
});

async function accessSpreadSheet(
  name,
  user_Name,
  hour,
  date,
  chat_id,
  is_late
) {
  const doc = new GoogleSpreadsheet(
    "1UelLtbqTyZDoH0qCFkHY0SUthSGvcPfeJ3MP9i9r28M"
  );
  await doc.useServiceAccountAuth({
    // env var values are copied from service account credentials generated by google
    // see "Authentication" section in docs for more info
    client_email: "check-in@fresh-waters-331507.iam.gserviceaccount.com",
    private_key:
      "-----BEGIN PRIVATE KEY-----\nMIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCh3VmeF4U/sfSn\n5xTeKjaq+gCq81+3DrBMfBTwiw8SjliRcepl+8vPVuJFE1d3+z3BftVLshAN7/qu\nAhs8MfvtAo0cN8M435mrEjzmOntZmxc0ewgr0yuDLazDY1qMSDp7+gmwYXyIYGTL\n1FRFGiouQd6cgMPefqyJf1k2PKeqvAaLzXtSVGm3JYnjyYxVLWayeVQ9+mjHUh0G\nG3fXI45iCub3dZJy/ELh42Cdd36D6pT+zf1UknjwQSS0WpglvpUJBWsEjQv24J1t\nTsXZF5l2Pwm/fhuyDHaLJY0QuowEas9oBXA2lVR62cuXRIl/rTyb05DajUPIHBm9\nzJvmBGhHAgMBAAECggEAAoK95a2KKiLf9L7Fo4ly+oWC4rIrDj32MlQvR2jJq9d1\nLj1COL2iycnDHBISn16XgvgQyVvn0y293ujhO32v4XfSjS5/zX17TCrKXXr29/Wg\nctoPCA4a0TwxW7mflAvqUosXHWJHgTrspxtnesfPAbACw6CyWtyZQvoQKIX9cZRk\nupoFvrs53RLpPml2XJ2noQu8eZGmk4F1XhvEZfCaTXPW1N1oFgQXLm2PcYPZciro\ngcWrdZZ64wgaNxK3pD6WWwjL39HK2Rym4puiTHQJ0MpFhgHM2xLiHXFvike6YvcW\n0K3MEJ6AJvfXNpvQhoNKUIUGYPsERv7C96mAF41B4QKBgQDX4CHm9YNYkZp609zB\nrIbDLATucqQfe3nqyyAWjgrVlOGXIESZroHh3NjrlGs3Kkm0Q+KIU149IYYNlrKQ\nKw4+ohulkKZqhEEhmL4KGM7kx/tdFpd46cMlYLgyYRo4C0RZ6mJ1u+OUvt3wOk4I\nxu3fKbD+8aZeUDp3H/tYhPbTkQKBgQC/80C3SgVFHby6ur2BIerSv7lhS+EJWQr8\na3B+YDV0F/mzRr+TiXopUYXGVGlan/fJFSSCJZ9zMYHVps8qLpB0qTfjzBHVWVeL\ndlygwVir2pe0++VFeAShsodosTWp5ZVgMxSXNYW1SozA+cM1HjKilExta8Ec3joQ\nsyIbWlViVwKBgB0PKMEkT3f+saLTHiZcCRAAvvEyMXGjd3fpu/oNSNwTXIKxb0qY\nuRckWXbs1bnpUV6YvMfJIShteNQfcw4BHbvEqqAQ5rXz86iIHRzS1hbp7KZNQjqe\njQxdBq6Rb6wXqC3KZVKf5jTBtLJ/xr1bue2OeSr4cILFnfknLvhtfaRhAoGAL0os\nvXtdBQQohRCQs4m5oqZdc50QGg9352xI0Lm/MZTejc52UFDkad2NyajuM8eJcl7l\nGbNPL0AZLpvkGg5SxIsUG+kg06EpMlC8zVYVFHHMQmh0ucKx0Wx8c8yE3hCT1pl/\nDym+gUWWm8xszV9dNjS3B5Yug4A0afzYAEknFA0CgYAdbvxAuRF0eAE0qgMytBun\nFovf5YJULEyaAlZq28UgsViNYY3uzTxsPXAzFFrb6TjSf4K6WFG2608ijj1QuqOo\n4MHXoV3B7llT1ZLogDETIgupVPMRXnBNRrEur52EQacJj7f4PlNT6mX1aMdw9Efm\nB4xdi5QG2IFenO0FMTiAdw==\n-----END PRIVATE KEY-----\n",
  });
  await doc.loadInfo();
  const firstSheet = doc.sheetsByIndex[0];
  const anhSheet = doc.sheetsByIndex[1];
  const longSheet = doc.sheetsByIndex[2];
  const binhSheet = doc.sheetsByIndex[3];
  var late;
  if (is_late) late = "x";
  firstSheet.addRow({
    Name: name,
    userName: user_Name,
    Time: hour,
    Date: date,
    Late: late,
  });
  if (chat_id == "-1001193572016") {
    anhSheet.addRow({
      Name: name,
      userName: user_Name,
      Time: hour,
      Date: date,
      Late: late,
    });
  }
  if (chat_id == "-1001168450211") {
    longSheet.addRow({
      Name: name,
      userName: user_Name,
      Time: hour,
      Date: date,
      Late: late,
    });
  }
  if (chat_id == "-1001453548823") {
    binhSheet.addRow({
      Name: name,
      userName: user_Name,
      Time: hour,
      Date: date,
      Late: late,
    });
  }
}
